let parse_map str_ls = let rec helper acc x y =
  if x >= String.length (List.nth str_ls 0) then helper acc 0 (y + 1)
  else if y >= List.length str_ls then acc
  else let c = String.get (List.nth str_ls y) x in if c <> '.' then helper ((c, x, y) :: acc) (x + 1) y
  else helper acc (x + 1) y
in helper [] 0 0

let same_frequency_pairs antennas = List.filter (fun ((ca, xa, ya), (cb, xb, yb)) -> ca = cb && Bool.not(xa = xb && ya = yb)) (List.flatten (List.map (fun a -> List.map (fun b -> (a, b)) antennas) antennas))

let antinodes antenna_pairs = List.map (fun ((_, xa, ya), (_, xb, yb)) -> (2 * xa - xb, 2 * ya - yb)) antenna_pairs

let unique list = List.fold_left (fun acc a -> if List.exists (fun b -> a = b) acc then acc else a :: acc) [] list

let () = let str_ls = String.split_on_char '\n' "..................................w...............
..................................................
.....................................C............
......................................3...........
.............b.......u.........w...........3......
...........................u......................
...8........K...........u.......y.........I.......
..................................P5........B.....
...U................2.P...............B...C.......
............i......x.P........w......s.C......IB5.
..............t....................y....x.........
.......8............K....1.......w............u...
.................i.............r.........s........
..2.............t..T.K.......r......8..........I..
8..............t..T.....r...................5.....
...2........................1....M.t...N....x.....
...V....U.......................N.S..........I....
.........W...i............O....v............S.....
................L...1...s.fT.....x............3...
....6.......C...N.........Tf.3....................
...6.......F..........V..........k...N......H.....
...................U..f........0......H.y.........
.......................O...P......0...............
.......L..U....m.......R............s.............
6...i.................O....0.2.........H.....B....
........................R......H.........S........
......F.....c..........m..............d...........
................F.L.....m..................7......
.............J.........................S..........
.b....j.k..............V0.........................
.................L.....K..........................
.......F.......J..............r.....M.............
......................m1....a.R...7...............
.......4......Y..6.D..............................
k............9.......D................M...........
.....Xb.................V...h.....................
A.........9.Xl..........D......R..................
4.............c..d........D.............7.........
.A.4.............c.............M.7.v..............
..........n.9........................h............
...j....bd.........f.....p..W.....................
.............k.........p..........................
.......W4.......p......X.....5..J.....v...........
........W.d..c......A........n..v.....o...........
..........l.....n..........o......Y...h...........
.....A............................................
..j..........n....................................
a9.lX..................Y...........o..............
.......a.................Y..........o.............
...a....l.......................p................." 
in let width = String.length (List.nth str_ls 0)
in let height = List.length str_ls
in print_int (List.fold_left (fun acc (x, y) -> if 0 <= x && x < width && 0 <= y && y < height then acc + 1 else acc) 0 (unique (antinodes (same_frequency_pairs (parse_map str_ls)))))
